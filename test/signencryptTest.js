const utils = require("../utils")
const secp256k1 = require("../curves/secp256k1")
const Signer = require("../signencrypt").Signer

const signer = new Signer(secp256k1);

let Alice = secp256k1.keypair(utils.prikeys[0])
let Bob = secp256k1.keypair(utils.prikeys[1])

let r = utils.randomBytes(32);
let R = secp256k1.drivePub(r)
let M = utils.asciiToHex("Hello Bob")
let ID_A = Alice.pubkey[0]
let ID_B = Bob.pubkey[0]
let w_A = Alice.prikey;
let W_A = Alice.pubkey;
let w_B = Bob.prikey
let W_B = Bob.pubkey


it('signCryption-js & verifySignature-js', async () => {

    /**
     * @param uint256    r    - random number generated by Alice
     * @param uint256    w_A  - Alice's private key
     * @param uint256    ID_A - Alice's unique identifiers
     * @param uint256    M    - message to be signcrypted
     * @param uint256[2] W_B  - Bob's public key
     * @param uint256    ID_B - Bob's unique identifiers
     */
    let { R, C, s } = signer.signCryption(r, w_A, ID_A, M, W_B, ID_B);
    // console.log({R, C, s});

    /**
     * @param R    - signature
     * @param C    - ciphertext
     * @param s    - signature
     * @param W_A  - Alice's public key
     * @param ID_A - Alice's unique identifiers
     * @param ID_B - Bob's unique identifiers
     */
    const validation = signer.verifySignature(R, C, s, W_A, ID_A, ID_B);

    /**
     * @return bool    v   - result of verification(True/False).
     */
    assert.equal(validation, true, 'oops');
});